var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LLMRateLimiters","category":"page"},{"location":"#LLMRateLimiters","page":"Home","title":"LLMRateLimiters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LLMRateLimiters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LLMRateLimiters]","category":"page"},{"location":"#LLMRateLimiters.BackoffStrategy","page":"Home","title":"LLMRateLimiters.BackoffStrategy","text":"Abstract type for backoff strategies\n\n\n\n\n\n","category":"type"},{"location":"#LLMRateLimiters.ExponentialBackoff","page":"Home","title":"LLMRateLimiters.ExponentialBackoff","text":"Exponential backoff strategy - increases wait time exponentially after 429 errors\n\n\n\n\n\n","category":"type"},{"location":"#LLMRateLimiters.HTTP429Backoff","page":"Home","title":"LLMRateLimiters.HTTP429Backoff","text":"HTTP429Backoff - A wrapper for backoff strategies specifically handling HTTP 429 errors\n\n\n\n\n\n","category":"type"},{"location":"#LLMRateLimiters.LinearBackoff","page":"Home","title":"LLMRateLimiters.LinearBackoff","text":"Linear backoff strategy - increases wait time linearly after 429 errors\n\n\n\n\n\n","category":"type"},{"location":"#LLMRateLimiters.NoBackoff","page":"Home","title":"LLMRateLimiters.NoBackoff","text":"No backoff strategy - maintains constant rate limiting\n\n\n\n\n\n","category":"type"},{"location":"#LLMRateLimiters.airatelimited-Tuple","page":"Home","title":"LLMRateLimiters.airatelimited","text":"airatelimited(args...; model::String = \"claudeh\", kwargs...)\n\nDispatches to the appropriate provider's rate limited implementation based on the model.\n\n\n\n\n\n","category":"method"},{"location":"#LLMRateLimiters.airatelimited_byprovider-Tuple{Val{:anthropic}, Vararg{Any}}","page":"Home","title":"LLMRateLimiters.airatelimited_byprovider","text":"airatelimited_byprovider(args...; model::String = \"claudeh\", kwargs...)\n\nA wrapper for aigenerate that automatically applies the appropriate rate limiter based on the model.\n\nArguments\n\nargs...: Arguments to be passed to aigenerate\nmodel::String: The model to use for generation. Defaults to \"claudeh\".\nkwargs...: Additional keyword arguments to be passed to aigenerate\n\nReturns\n\nThe result of aigenerate after applying rate limiting\n\n\n\n\n\n","category":"method"},{"location":"#LLMRateLimiters.airatelimited_byprovider-Tuple{Val{:no_provider_info}, Vararg{Any}}","page":"Home","title":"LLMRateLimiters.airatelimited_byprovider","text":"Fallback to simple aigenerate without ratelimit\n\n\n\n\n\n","category":"method"},{"location":"#LLMRateLimiters.retry_on_rate_limit-Tuple{Any}","page":"Home","title":"LLMRateLimiters.retry_on_rate_limit","text":"Rate limit handling based on the response headers.\n\nUsage\n\nresult = retryonratelimit() do     yourexisting_function(arg1, arg2) end\n\n\n\n\n\n","category":"method"}]
}
